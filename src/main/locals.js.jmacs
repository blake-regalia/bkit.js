
let [D_TEXT_ENCODER, D_TEXT_DECODER]
	= 'undefined' === typeof Buffer
		? ('undefined' === typeof TextEncoder
			? [new (require('util').TextEncoder)(), new (require('util').TextDecoder)()]  // eslint-disable-line global-require
			: [new TextEncoder(), new TextDecoder()])
		: [{encode:s => Buffer.from(s, 'utf-8')}, {decode:at => Buffer.from(at).toString('utf-8')}];


const AT_UTF_16_TOKEN = new Uint8Array([0xfe]);

const X_ENCODING_TYPED_ARRAY_INT8 = 0x11;
const X_ENCODING_TYPED_ARRAY_UINT8 = 0x21;
const X_ENCODING_TYPED_ARRAY_UINT8_CLAMPED = 0x31;
const X_ENCODING_TYPED_ARRAY_INT16 = 0x12;
const X_ENCODING_TYPED_ARRAY_UINT16 = 0x22;
const X_ENCODING_TYPED_ARRAY_INT32 = 0x14;
const X_ENCODING_TYPED_ARRAY_UINT32 = 0x24;
const X_ENCODING_TYPED_ARRAY_FLOAT32 = 0x44;
const X_ENCODING_TYPED_ARRAY_FLOAT64 = 0x48;
const X_ENCODING_TYPED_ARRAY_BIGINT64 = 0x58;
const X_ENCODING_TYPED_ARRAY_BIGUINT64 = 0x68;


const F_READ_0 = () => 0;
const F_READ_1 = (at, ib) => at[ib];
const F_WRITE_0 = (at, ib) => {
	at[ib] = 0;
	return at;
};
const F_WRITE_1 = (at, ib, x) => {
	at[ib] = x & 0xff;
	return at;
};

@.{
	function* mk_fast(s_what, b_le, b_unsigned, f_each, f_out) {
		// shared functions
		yield /* syntax: js */ `
			// 0 bytes
			F_${s_what.toUpperCase()}_0,

			// 1 byte
			F_${s_what.toUpperCase()}_1,
		`

		if(b_unsigned) {
			yield /* syntax: js */ `
				// 2 bytes
				H_FAST_${s_what.toUpperCase()}S_INT_${b_le? 'L': 'B'}E[2],

				// 3 bytes
				H_FAST_${s_what.toUpperCase()}S_INT_${b_le? 'L': 'B'}E[3],
			`
		}

		let sj_op_shift = 'read' === s_what? '<<': '>>>';
		let sj_op_mul = 'read' === s_what? '*': '/';

		let ns_sign = b_unsigned? 16: 24;

		// each byte width
		for(let nb=(b_unsigned? 4: 2); nb<(b_unsigned? 8: 5); nb++) {
			// build operations table
			let a_ops = [];
			let ib_start = b_le? 0: nb-1;
			let n_change = b_le? +1: -1;
			let ib_stop = b_le? nb: -1;
			for(let ib=ib_start, ns=0; ib!==ib_stop; ib+=n_change, ns+=8) {
				// access typed array element
				let sj_access = /* syntax: js */ `at[ib${ib? `+${ib}`: ''}]`;

				// bit shift value
				let sj_shift = '';
				if(ns > ns_sign) {
					sj_shift = /* syntax: js.value */ `${sj_op_mul} 0x1${'0'.repeat(ns * 0.25)}`;
				}
				else if(ns) {
					sj_shift = /* syntax: js.value */ `${sj_op_shift} ${ns}`;
				}

				// byte component
				a_ops.push(f_each(sj_access, sj_shift, ns));
			}

			if(!b_le) a_ops.reverse();

			// OR components together
			yield /* syntax: js */ `
				// ${nb} bytes
				(at, ib${'read' === s_what? '': ', x'}) => ${f_out(a_ops)},
			`;
		}
	}

	function* mk_fast_reads(b_le, b_unsigned) {
		yield* mk_fast('read', b_le, b_unsigned, (sj_access, sj_shift, ns) => {
			return ns? /* syntax: js */ `(${sj_access} ${sj_shift})`: sj_access;
		}, a_ops => a_ops.join(` ${b_unsigned? '+': '|'} `));
	}

	function* mk_fast_writes(b_le, b_unsigned) {
		yield* mk_fast('write', b_le, b_unsigned, (sj_access, sj_shift, ns) => {
			// byte component
			let sj_assign = ns? /* syntax: js */ `(x ${sj_shift})`: 'x';

			return /* syntax: js */ `${sj_access} = ${sj_assign} & 0xff;`;
		}, a_ops => /* syntax: js */ `{
			${a_ops.join('\n\t\t')}
			return at;
		}`);
	}
}


const H_FAST_READS_INT_BE = [@*{
	yield* mk_fast_reads(false, false);
}];

const H_FAST_READS_INT_LE = [@*{
	yield* mk_fast_reads(true, false);
}];


const H_FAST_WRITES_INT_BE = [@*{
	yield* mk_fast_writes(false, false);
}];

const H_FAST_WRITES_INT_LE = [@*{
	yield* mk_fast_writes(true, false);
}];


const H_FAST_READS_UINT_BE = [@*{
	yield* mk_fast_reads(false, true);
}];

const H_FAST_READS_UINT_LE = [@*{
	yield* mk_fast_reads(true, true);
}];

const H_FAST_WRITES_UINT_BE = [@*{
	yield* mk_fast_writes(false, true);
}];

const H_FAST_WRITES_UINT_LE = [@*{
	yield* mk_fast_writes(true, true);
}];



module.exports = {
	// popcount for uint32s
	popcount_uint32(x) {
		x -= (x >> 1) & 0x55555555;
		x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
		return ((x + (x >> 4) & 0xf0f0f0f) * 0x1010101) >> 24;
	},

	// popcount for uint16s
	popcount_uint16(x) {
		x -= (x >>> 1) & 0x5555;
		x = (x & 0x3333) + ((x >>> 2) & 0x3333);
		return ((x + (x >>> 4) & 0xf0f) * 0x1010101) >>> 24;
	},

	// select1 lo for up to uint32s
	select1_lo_uint32(x, i_1) {
		let ii_pos = -1;
		while(i_1 >= 0 && x) {
			i_1 -= x & 1;
			x >>>= 1;
			ii_pos += 1;
		}
		return ii_pos;
	},

	// select1 hi on uint16s
	select1_hi_uint16(xu16_value, i_1) {
		let ii_pos = -1;
		while(i_1 >= 0 && xu16_value) {
			i_1 -= xu16_value & 0x8000;
			xu16_value <<= 1;
			ii_pos += 1;
		}
		return ii_pos;
	},


	D_TEXT_ENCODER,
	D_TEXT_DECODER,
	AT_UTF_16_TOKEN,

	X_ENCODING_TYPED_ARRAY_INT8,
	X_ENCODING_TYPED_ARRAY_UINT8,
	X_ENCODING_TYPED_ARRAY_UINT8_CLAMPED,
	X_ENCODING_TYPED_ARRAY_INT16,
	X_ENCODING_TYPED_ARRAY_UINT16,
	X_ENCODING_TYPED_ARRAY_INT32,
	X_ENCODING_TYPED_ARRAY_UINT32,
	X_ENCODING_TYPED_ARRAY_FLOAT32,
	X_ENCODING_TYPED_ARRAY_FLOAT64,
	X_ENCODING_TYPED_ARRAY_BIGINT64,
	X_ENCODING_TYPED_ARRAY_BIGUINT64,

	H_ENCODING_TO_TYPED_ARRAY: {
		[X_ENCODING_TYPED_ARRAY_INT8]: Int8Array,
		[X_ENCODING_TYPED_ARRAY_UINT8]: Uint8Array,
		[X_ENCODING_TYPED_ARRAY_UINT8_CLAMPED]: Uint8ClampedArray,
		[X_ENCODING_TYPED_ARRAY_INT16]: Int16Array,
		[X_ENCODING_TYPED_ARRAY_UINT16]: Uint16Array,
		[X_ENCODING_TYPED_ARRAY_INT32]: Int32Array,
		[X_ENCODING_TYPED_ARRAY_UINT32]: Uint32Array,
		[X_ENCODING_TYPED_ARRAY_FLOAT32]: Float32Array,
		[X_ENCODING_TYPED_ARRAY_FLOAT64]: Float64Array,
		[X_ENCODING_TYPED_ARRAY_BIGINT64]: BigInt64Array,
		[X_ENCODING_TYPED_ARRAY_BIGUINT64]: BigUint64Array,
	},

	H_FAST_READS_INT_BE,
	H_FAST_READS_INT_LE,
	H_FAST_WRITES_INT_BE,
	H_FAST_WRITES_INT_LE,

	H_FAST_READS_UINT_BE,
	H_FAST_READS_UINT_LE,
	H_FAST_WRITES_UINT_BE,
	H_FAST_WRITES_UINT_LE,
};
