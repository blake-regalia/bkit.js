const locals = require('../main/locals.js');
const {
	D_TEXT_ENCODER,
	D_TEXT_DECODER,
	AT_UTF_16_TOKEN,
	popcount_uint16,
	popcount_uint32,
	select1_uint32,
	H_FAST_READS_BE,
	H_FAST_READS_LE,
	H_FAST_WRITES_BE,
	H_FAST_WRITES_LE,
} = locals;

const BufferEncoder = require('../class/buffer-encoder.js');
const BufferDecoder = require('../class/buffer-decoder.js');
const BitsequenceWriter = require('../class/bitsequence-writer.js');
const BitsequenceReader = require('../class/bitsequence-reader.js');

// creates the smallest uint typed array that satisfies the requisite `range`
function uint_array(n_range) {
	if(!Number.isInteger(n_range) && 'bigint' !== typeof n_range) {
		throw new TypeError(`uint size '${n_range}' is not an integer!`);
	}
	else if(n_range <= 0xff) {
		return Uint8Array;
	}
	else if(n_range <= 0xffff) {
		return Uint16Array;
	}
	else if(n_range <= 0xffffffff) {
		return Uint32Array;
	}
	else if(n_range <= 0xffffffffffffffffn) {
		return BigUint64Array;
	}
};


function build_popcount_cache(ns_size) {
	let atu8_cache = new Uint8Array(1 << ns_size);
	for(let x=0; x<(1 << ns_size); x++) {
		atu8_cache[x] = popcount_uint16(x);
	}
	return atu8_cache;
}

function load_popcount_cache15(k_other) {
	if(k_other && k_other._atu8_popcount_cache15) {
		return k_other._atu8_popcount_cache15;
	}
	else if(k_other && k_other._atu8_popcount_cache16) {
		return k_other._atu8_popcount_cache16.subarray(0, 1 << 15);
	}
	else {
		return build_popcount_cache(15);
	}
}

function load_popcount_cache16(k_other) {
	if(k_other && k_other._atu8_popcount_cache16) {
		return k_other._atu8_popcount_cache16;
	}
	else {
		return build_popcount_cache(16);
	}
}

function CachedUint32Popcounter_64KiB(k_other) {
	let atu8_cache16 = load_popcount_cache16(k_other);

	return {
		_atu8_popcount_cache16: atu8_cache16,
		popcountUint32: x => atu8_cache16[x & 0xffff] + atu8_cache16[x >>> 16],
	};
};

function CachedUint16Popcounter_32KiB(k_other) {
	let atu8_cache15 = load_popcount_cache15(k_other);

	return {
		_atu8_popcount_cache15: atu8_cache15,
		popcountUint16: x => atu8_cache15[x & 0x7fff] + (x >= 0x8000),
	};
};

function CachedUint16Popcounter_64KiB(k_other) {
	let atu8_cache16 = load_popcount_cache16(k_other);

	return {
		_atu8_popcount_cache16: atu8_cache16,
		popcountUint16: x => atu8_cache16[x],
	};
};


function build_select1s_cache(ns_size) {
	const atu32_cache = new Uint32Array((1 << ns_size) * 2);

	// there is a better way to do this but it's hard >_<
	let x_max = 1 << ns_size;
	for(let x=0; x<x_max; x++) {
		let xb_set = 0;
		let xm_mask = 0x1;
		let x_shift = 0x1;
		let b_lo = false;
		let xb_lo = 0;

		for(let ii_scan=0; ii_scan<ns_size; ii_scan++) {
			if(!b_lo && x_shift >= 0x100000000) {
				xb_lo = xb_set;
				xb_set = 0;
				x_shift = 0x1;
				b_lo = true;
			}

			if(x & xm_mask) {
				xb_set += ii_scan * x_shift;
				x_shift *= 0x10;
			}

			xm_mask *= 2;
		}

		if(b_lo) {
			atu32_cache[x<<1] = xb_lo;
			atu32_cache[(x<<1)+1] = xb_set;
		}
		else {
			atu32_cache[x<<1] = xb_set;
		}
	}

	return atu32_cache;
}

function load_select1s_cache15(k_other) {
	if(k_other && k_other._atu32_select1s_cache15) {
		return k_other._atu32_select1s_cache15;
	}
	else if(k_other && k_other._atu32_select1s_cache16) {
		return k_other._atu32_select1s_cache16.subarray(0, (1 << 15) * 2);
	}
	else {
		return build_select1s_cache(15);
	}
}

function load_select1s_cache16(k_other) {
	if(k_other && k_other._atu32_select1s_cache16) {
		return k_other._atu32_select1s_cache16;
	}
	else if(k_other && k_other._atu32_select1s_cache15) {
		throw new Error('refusing to expand cache15 to cache16. try reordering cache reuse.');
	}
	else {
		return build_select1s_cache(16);
	}
}

function CachedUint16Selector_256KiB(k_other) {
	let atu32_cache15 = load_select1s_cache15(k_other);
	
	return {
		_atu32_select1s_cache15: atu32_cache15,
		select1Uint16: (x, i_1) => {
			if(x >= 0x8000) {
				if(!i_1 && (x & 1)) return 0;

				return (atu32_cache15[((x & 0x7fff) << 1) + (i_1 > 7)] >>> (i_1 << 2)) & 0xf || 0xf;
			}
			else {
				return (atu32_cache15[(x << 1) + (i_1 > 7)] >>> (i_1 << 2)) & 0xf;
			}
		},
	};
}

function CachedUint16Selector_512KiB(k_other) {
	let atu32_cache16 = load_select1s_cache16(k_other);
	
	return {
		_atu32_select1s_cache16: atu32_cache16,
		select1Uint16: (x, i_1) => (atu32_cache16[(x << 1) + (i_1 > 7)] >>> (i_1 << 2)) & 0xf,
	};
}


function CachedUint32Selector_256KiB(k_other, _k_uint16_popcounter) {
	let atu32_cache15 = load_select1s_cache15(k_other);
	let k_uint16_popcounter = _k_uint16_popcounter
		|| (k_other && k_other._k_uint16_popcounter)
		|| G_DEFAULT_POPCOUNTERS;

	let select1_uint16_cache15 = (x, i_1) => {
		if(x >= 0x8000) {
			if(!i_1 && (x & 1)) return 0;

			return (atu32_cache15[((x & 0x7fff) << 1) + (i_1 > 7)] >>> (i_1 << 2)) & 0xf || 0xf;
		}
		else {
			return (atu32_cache15[(x << 1) + (i_1 > 7)] >>> (i_1 << 2)) & 0xf;
		}
	};

	return {
		_k_uint16_popcounter: k_uint16_popcounter,
		_atu32_select1s_cache15: atu32_cache15,
		select1Uint32: (xu32, i_1) => {
			if(xu32 < 0x10000) {
				return select1_uint16_cache15(xu32, i_1);
			}
			else if(!i_1 && (xu32 & 1)) {
				return 0;
			}
			else {
				let xu16_lo = xu32 & 0xffff;

				let ni_lo = k_uint16_popcounter.popcountUint16(xu16_lo);

				// answer is in lower half
				if(i_1 < 16 && i_1 < ni_lo) {
					return select1_uint16_cache15(xu16_lo, i_1);
				}

				return 16 + select1_uint16_cache15(xu32 >>> 16, i_1 - ni_lo);
			}
		}
	};
}


const G_DEFAULT_POPCOUNTERS = {
	popcountUint16: popcount_uint16,
};

function CachedUint32Selector_512KiB(k_other, k_uint16_popcounter=G_DEFAULT_POPCOUNTERS) {
	let atu32_cache16 = load_select1s_cache16(k_other);
	
	return {
		_atu32_select1s_cache16: atu32_cache16,
		select1Uint32: (xu32, i_1) => {
			if(xu32 < 0x10000) {
				return (atu32_cache16[(xu32 << 1) + (i_1 > 7)] >>> (i_1 << 2)) & 0xf;
			}
			else if(!i_1 && (xu32 & 1)) {
				return 0;
			}
			else {
				let xu16_lo = xu32 & 0xffff;

				// could be in lower half
				if(i_1 < 16) {
					let ii_short = (atu32_cache16[(xu16_lo << 1) + (i_1 > 7)] >>> (i_1 << 2)) & 0xf;

					if(ii_short) return ii_short;
				}

				// number of bits to skip
				let ni_skip = k_uint16_popcounter.popcountUint16(xu16_lo);
				let i_rel = i_1 - ni_skip;

				let xu16_hi = xu32 >>> 16;
				return 16 + ((atu32_cache16[(xu16_hi << 1) + (i_rel > 7)] >>> (i_rel << 2)) & 0xf);
			}
		},
	};
}



module.exports = Object.assign({
	fitUintArray: uint_array,
	newUintArray: (n_range, n_size) => new (uint_array(n_range))(n_size),

	alignedUintArrayCast(at_from, dc_typed_to, b_trim=false) {
		// ref byte offset
		let ib_offset = at_from.byteOffset;

		// ref bytes per element
		let nb_element = dc_typed_to.BYTES_PER_ELEMENT;

		// byte length of from
		let nb_from = at_from.byteLength;

		// length after cast
		let xr_cast = nb_from / nb_element;

		// precompute new typed array length
		let nl_typed = b_trim? Math.floor(xr_cast): Math.ceil(xr_cast);

		// not mem-aligned or need to grow
		if((ib_offset % nb_element) || nl_typed > xr_cast) {
			// allocate new mem-aligned segment
			let ab_contents = new ArrayBuffer((nl_typed * nb_element) - ib_offset);

			// create byte-view over segment
			let atu8_contents = new Uint8Array(ab_contents);

			// uint8array view of from
			let atu8_from = new Uint8Array(at_from.buffer, ib_offset, nb_from);

			// copy contents over
			atu8_contents.set(atu8_from.subarray(ib_offset));

			// create typed array instance
			return new dc_typed_to(ab_contents, 0, nl_typed);
		}
		else {
			// create typed array instance
			return new dc_typed_to(at_from.buffer, ib_offset, nl_typed);
		}
	},

	encodeUtf8: s_chunk => D_TEXT_ENCODER.encode(s_chunk),
	encodeUtf16(s_chunk) {
		// encode chunk as utf-16le
		let ab_chunk = Buffer.from(s_chunk, 'utf-16le');

		// prefix buffer w/ utf-16 token
		return Buffer.concat([AT_UTF_16_TOKEN, ab_chunk], ab_chunk.length + 1);
	},

	decodeUtf8: at_chunk => D_TEXT_DECODER.decode(at_chunk),

	decodeVuint(at_contents, ib_read=0) {
		let gc_decode = {
			_at_contents: at_contents,
			_ib_read: ib_read,
		};

		let x_value = BufferDecoder.$_decode_vuint(gc_decode);

		return [x_value, gc_decode._ib_read];
	},

	decodeVbigint(at_contents, ib_read=0) {
		let gc_decode = {
			_at_contents: at_contents,
			_ib_read: ib_read,
		};

		let x_value = BufferDecoder.$_decode_vbigint(gc_decode);

		return [x_value, gc_decode._ib_read];
	},

	readUintLE(at_contents, ib_read, nb_read) {
		return H_FAST_READS_LE[nb_read](at_contents, ib_read);
	},

	readerUintLE(nb_read) {
		return H_FAST_READS_LE[nb_read];
	},

	writeUintLE(at_contents, ib_write, nb_write, x_value) {
		H_FAST_WRITES_LE[nb_write](at_contents, ib_write, x_value);
		return at_contents;
	},

	writerUintLE(nb_write) {
		return H_FAST_WRITES_LE[nb_write];
	},

	readUintBE(at_contents, ib_read, nb_read) {
		return H_FAST_READS_BE[nb_read](at_contents, ib_read);
	},

	readerUintBE(nb_read) {
		return H_FAST_READS_BE[nb_read];
	},

	writeUintBE(at_contents, ib_write, nb_write, x_value) {
		return H_FAST_WRITES_BE[nb_write](at_contents, ib_write, x_value);
	},

	writerUintBE(nb_write) {
		return H_FAST_WRITES_BE[nb_write];
	},

	concat2(at_a, at_b) {
		let nb_a = at_a.length;
		let at_out = new Uint8Array(nb_a+at_b.length);

		at_out.set(at_a);
		at_out.set(at_b, nb_a);

		return at_out;
	},

	concat(a_list, nb_list=a_list.reduce((c, at) => c+at.length, 0)) {
		let at_out = new Uint8Array(nb_list);

		let ib_write = 0;
		for(let at_item of a_list) {
			at_out.set(at_item, ib_write);
			ib_write += at_item.length;
		}

		return at_out;
	},

	BitsequenceWriter,
	BitsequenceReader,

	BufferEncoder,
	BufferDecoder,

	constants: locals,

	popcountUint16: popcount_uint16,
	popcountUint32: popcount_uint32,

	CachedUint16Popcounter_32KiB,
	CachedUint16Popcounter_64KiB,
	CachedUint32Popcounter_64KiB,

	select1Uint16: select1_uint32,
	select1Uint32: select1_uint32,

	CachedUint16Selector_256KiB,
	CachedUint16Selector_512KiB,

	CachedUint32Selector_256KiB,
});
