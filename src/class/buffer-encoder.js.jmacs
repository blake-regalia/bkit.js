const {
	D_TEXT_ENCODER,
	X_ENCODING_TYPED_ARRAY_INT8,
	X_ENCODING_TYPED_ARRAY_UINT8,
	X_ENCODING_TYPED_ARRAY_UINT8_CLAMPED,
	X_ENCODING_TYPED_ARRAY_INT16,
	X_ENCODING_TYPED_ARRAY_UINT16,
	X_ENCODING_TYPED_ARRAY_INT32,
	X_ENCODING_TYPED_ARRAY_UINT32,
	X_ENCODING_TYPED_ARRAY_FLOAT32,
	X_ENCODING_TYPED_ARRAY_FLOAT64,
	X_ENCODING_TYPED_ARRAY_BIGINT64,
	X_ENCODING_TYPED_ARRAY_BIGUINT64,
	H_FAST_READS_BE,
	H_FAST_READS_LE,
	H_FAST_WRITES_BE,
	H_FAST_WRITES_LE,
} = require('../main/locals.js');

const NB_DEFAULT_ALLOCATION = 64 * 1024;  // 64 KiB

function BufferEncoder$grow(k_self) {
	let at_contents = k_self._at_contents;

	// alloc new buffer and copy contents
	let nb_alloc = at_contents.length + k_self._nb_grow;
	let at_alloc = new Uint8Array(nb_alloc);

	// copy contents over to new alloc region
	at_alloc.set(at_contents);

	// save field and return
	return k_self._at_contents = at_alloc;
}


/**
 * Encode proprietary datatypes into a buffer.
 */
class BufferEncoder {
	constructor(h_config={}) {
		let {
			malloc: b_force_malloc=false,
			size: nb_allocation=NB_DEFAULT_ALLOCATION,
			grow: nb_grow=NB_DEFAULT_ALLOCATION,
		} = h_config;

		let at_contents;
		if(b_force_malloc) {
			let ab_alloc = new ArrayBuffer(nb_allocation);
			at_contents = new Uint8Array(ab_alloc);
		}
		else {
			at_contents = new Uint8Array(nb_allocation);
		}

		Object.assign(this, {
			_at_contents: at_contents,
			_ib_write: 0,
			_nb_grow: nb_grow,
		});
	}

	/**
	 * Write position within buffer
	 * @return {BytePosition} write position
	 */
	get write() {
		return this._ib_write;
	}

	/**
	 * Reset write position to 0
	 */
	reset() {
		this._ib_write = 0;
	}

	/**
	 * Extract a sliced copy from the buffer
	 * @param  {BytePosition} ib_lo - inclusive lower range of slice
	 * @param  {BytePosition} ib_hi - exclusive upper range of slice
	 * @return {Uint8Array} the sliced data buffer
	 */
	slice(ib_lo=0, ib_hi=this._ib_write) {
		return this._at_contents.slice(ib_lo, ib_hi);
	}

	/**
	 * Copy out the buffer and reset the write position so the decoder can re-use the existing memory region
	 * @return {Uint8Array} the sliced data buffer
	 */
	close() {
		// copy out the buffer
		let at_slice = this._at_contents.slice(0, this._ib_write);

		// reset write position
		this._ib_write = 0;

		// return slice
		return at_slice;
	}

	/**
	 * Create a shallow view on the existing buffer
	 * @param  {BytePosition} ib_lo - inclusive lower range of view
	 * @param  {BytePosition} ib_hi - exclusive upper range of view
	 * @return {Uint8Array} the view of the buffer
	 */
	view(ib_lo=0, ib_hi=this._ib_write) {
		return this._at_contents.subarray(ib_lo, ib_hi);
	}

	/**
	 * Write a single byte to the buffer and advance the write position by 1
	 * @param  {ByteValue} xb - the value to write
	 * @return {BytePosition} the updated write position
	 */
	append1(xb) {
		let at_contents = this._at_contents;
		if(this._ib_write < at_contents.length) {
			at_contents[this._ib_write++] = xb;
			return this._ib_write;
		}
		else {
			return this.append([xb]);
		}
	}

	/**
	 * Write 2 bytes to the buffer and advance the write position accordingly
	 * @param  {ByteValue} xb_a - value to write at position+0
	 * @param  {ByteValue} xb_b - value to write at position+1
	 * @return {BytePosition} the updated write position
	 */
	append2(xb_a, xb_b) {
		let at_contents = this._at_contents;
		let ib_write = this._ib_write;
		if(ib_write < at_contents.length - 1) {
			at_contents[ib_write] = xb_a;
			at_contents[ib_write+1] = xb_b;
			return this._ib_write += 2;
		}
		else {
			return this.append([xb_a, xb_b]);
		}
	}

	/**
	 * Write 3 bytes to the buffer and advance the write position accordingly
	 * @param  {ByteValue} xb_a - value to write at position+0
	 * @param  {ByteValue} xb_b - value to write at position+1
	 * @param  {ByteValue} xb_c - value to write at position+2
	 * @return {BytePosition} the updated write position
	 */
	append3(xb_a, xb_b, xb_c) {
		let at_contents = this._at_contents;
		let ib_write = this._ib_write;
		if(ib_write < at_contents.length - 2) {
			at_contents[ib_write] = xb_a;
			at_contents[ib_write+1] = xb_b;
			at_contents[ib_write+2] = xb_c;
			return this._ib_write += 3;
		}
		else {
			return this.append([xb_a, xb_b, xb_c]);
		}
	}

	/**
	 * Write 4 bytes to the buffer and advance the write position accordingly
	 * @param  {ByteValue} xb_a - value to write at position+0
	 * @param  {ByteValue} xb_b - value to write at position+1
	 * @param  {ByteValue} xb_c - value to write at position+2
	 * @param  {ByteValue} xb_d - value to write at position+3
	 * @return {BytePosition} the updated write position
	 */
	append4(xb_a, xb_b, xb_c, xb_d) {
		let at_contents = this._at_contents;
		let ib_write = this._ib_write;
		if(ib_write < at_contents.length - 3) {
			at_contents[ib_write] = xb_a;
			at_contents[ib_write+1] = xb_b;
			at_contents[ib_write+2] = xb_c;
			at_contents[ib_write+3] = xb_d;
			return this._ib_write += 4;
		}
		else {
			return this.append([xb_a, xb_b, xb_c, xb_d]);
		}
	}

	/**
	 * Write 5 bytes to the buffer and advance the write position accordingly
	 * @param  {ByteValue} xb_a - value to write at position+0
	 * @param  {ByteValue} xb_b - value to write at position+1
	 * @param  {ByteValue} xb_c - value to write at position+2
	 * @param  {ByteValue} xb_d - value to write at position+3
	 * @param  {ByteValue} xb_e - value to write at position+4
	 * @return {BytePosition} the updated write position
	 */
	append5(xb_a, xb_b, xb_c, xb_d, xb_e) {
		let at_contents = this._at_contents;
		let ib_write = this._ib_write;
		if(ib_write < at_contents.length - 4) {
			at_contents[ib_write] = xb_a;
			at_contents[ib_write+1] = xb_b;
			at_contents[ib_write+2] = xb_c;
			at_contents[ib_write+3] = xb_d;
			at_contents[ib_write+4] = xb_e;
			return this._ib_write += 5;
		}
		else {
			return this.append([xb_a, xb_b, xb_c, xb_d, xb_e]);
		}
	}

	/**
	 * Write 6 bytes to the buffer and advance the write position accordingly
	 * @param  {ByteValue} xb_a - value to write at position+0
	 * @param  {ByteValue} xb_b - value to write at position+1
	 * @param  {ByteValue} xb_c - value to write at position+2
	 * @param  {ByteValue} xb_d - value to write at position+3
	 * @param  {ByteValue} xb_e - value to write at position+4
	 * @param  {ByteValue} xb_f - value to write at position+4
	 * @return {BytePosition} the updated write position
	 */
	append6(xb_a, xb_b, xb_c, xb_d, xb_e, xb_f) {
		let at_contents = this._at_contents;
		let ib_write = this._ib_write;
		if(ib_write < at_contents.length - 5) {
			at_contents[ib_write] = xb_a;
			at_contents[ib_write+1] = xb_b;
			at_contents[ib_write+2] = xb_c;
			at_contents[ib_write+3] = xb_d;
			at_contents[ib_write+4] = xb_e;
			at_contents[ib_write+5] = xb_f;
			return this._ib_write += 6;
		}
		else {
			return this.append([xb_a, xb_b, xb_c, xb_d, xb_e, xb_f]);
		}
	}

	/**
	 * Write all the bytes in the given array to the buffer and advance the write position accordingly
	 * @param  {Uint8Array} at_item - bytes to write to the buffer
	 * @return {BytePosition} the updated write position
	 */
	append(at_item) {
		let ib_write = this._ib_write;
		let at_contents = this._at_contents;

		let nb_contents = at_contents.length;
		let nb_item = at_item.length;

		// append item will overflow current buffer; figure out how much to alloc
		let ib_end = ib_write + nb_item;
		let x_overflow = ib_end - nb_contents;
		if(x_overflow > 0) {
			// alloc new buffer and copy contents
			let nb_grow = nb_contents + (Math.ceil(x_overflow / this._nb_grow) * this._nb_grow);
			let at_alloc = new Uint8Array(nb_grow);
			at_alloc.set(at_contents);
			this._at_contents = at_contents = at_alloc;
		}

		// copy item
		at_contents.set(at_item, ib_write);
		return this._ib_write = ib_end;
	}

	writerUintLE(nb_write) {
		let f_writer = H_FAST_WRITES_LE[nb_write];

		switch(nb_write) {
			case 1: return this.append1.bind(this);

			@*{
				for(let nb_write=2; nb_write<=6; nb_write++) {
					yield /* syntax: js */ `
						case ${nb_write}: return (x_value) => {
							let ib_write = this._ib_write;
							let at_contents = this._at_contents;

							// write exceeds current buffer; grow
							if(ib_write < at_contents.length - ${nb_write}) {
								at_contents = BufferEncoder$grow(this);
							}

							// write uintLE to contents
							f_writer(at_contents, ib_write, x_value);

							// advance write position
							this._ib_write += ${nb_write};
						};
					`;
				}
			}

			default: {
				throw new Error(`cannot write given width: ${nb_write}`);
			}
		}
	}

	/**
	 * Encode a null-terminated UTF8-encoded string to the buffer
	 * @param  {string} s_value - the string to encode
	 * @return {BytePosition} the updated write position
	 */
	ntu8String(s_value) {
		return this.append(D_TEXT_ENCODER.encode(s_value+'\0'));
	}

	/**
	 * Encode a length-prefixed UTF8-encoded string to the buffer
	 * @param  {string} s_value - the string to encode
	 * @return {BytePosition} the updated write position
	 */
	lpu8String(s_value) {
		// encode string
		let at_value = D_TEXT_ENCODER.encode(s_value);

		// length prefix
		this.vuint(at_value.length);

		// write string data and return write position
		return this.append(at_value);
	}

	/**
	 * Encode the metadata of a TypedArray to the buffer (its class type and array length)
	 * @param  {TypedArray} at_values - the typed array to encode its metadata
	 * @return {BytePosition} the updated write position
	 */
	metaTypedArray(at_values) {
		let x_type;
		if(at_values instanceof Uint8Array) {
			x_type = X_ENCODING_TYPED_ARRAY_UINT8;
		}
		else if(at_values instanceof Uint16Array) {
			x_type = X_ENCODING_TYPED_ARRAY_UINT16;
		}
		else if(at_values instanceof Uint32Array) {
			x_type = X_ENCODING_TYPED_ARRAY_UINT32;
		}
		else if(at_values instanceof Int8Array) {
			x_type = X_ENCODING_TYPED_ARRAY_INT8;
		}
		else if(at_values instanceof Int16Array) {
			x_type = X_ENCODING_TYPED_ARRAY_INT16;
		}
		else if(at_values instanceof Int32Array) {
			x_type = X_ENCODING_TYPED_ARRAY_INT32;
		}
		else if(at_values instanceof Uint8ClampedArray) {
			x_type = X_ENCODING_TYPED_ARRAY_UINT8_CLAMPED;
		}
		else if(at_values instanceof Float32Array) {
			x_type = X_ENCODING_TYPED_ARRAY_FLOAT32;
		}
		else if(at_values instanceof Float64Array) {
			x_type = X_ENCODING_TYPED_ARRAY_FLOAT64;
		}
		else if(at_values instanceof BigInt64Array) {
			x_type = X_ENCODING_TYPED_ARRAY_BIGINT64;
		}
		else if(at_values instanceof BigUint64Array) {
			x_type = X_ENCODING_TYPED_ARRAY_BIGUINT64;
		}

		// typed array type
		this.append1(x_type);

		// number of elements
		return this.vuint(at_values.length);
	}

	/**
	 * Encode a TypedArray to the buffer (including metadata such as the class type and array length)
	 * @param  {TypedArray} at_values - the typed array to encode
	 * @return {BytePosition} the updated write position
	 */
	typedArray(at_values) {
		this.metaTypedArray(at_values);

		// not uint8 array
		let at_append = new Uint8Array(at_values.buffer, at_values.byteOffset, at_values.byteLength);

		// values
		return this.append(at_append);
	}

	/**
	 * Encode a variable-width unsigned int (up to 52-bits of precision, meaning a maximum of 6 bytes encoded)
	 * @param  {int} x_value - the integer value to encode
	 * @return {BytePosition} the updated write position
	 */
	vuint(x_value) {
		// 0x80: 1
		// 0x4000: 2
		// 0x200000: 3
		// 0x10000000: 4
		// 0x7fffffff
		// 0x7fffffff
		// 0x800000000: 5
		// 0x40000000000: 6
		// 0x2000000000000: 7
		// 0x100000000000000: 8
		// 0x7ffffffffffff
		// <= 0x7FFFFFFFFFFFFFFF

		// can do bitwise operations on this number
		if(x_value <= 0x7fffffff) {
			if(x_value <= 0x3fff) {
				if(x_value <= 0x7f) {
					return this.append1(x_value);
				}
				else {
					return this.append2(
						0x80 | (x_value & 0x7f),
						x_value >> 7
					);
				}
			}
			else if(x_value <= 0x1fffff) {
				return this.append3(
					0x80 | (x_value & 0x7f),
					0x80 | ((x_value >> 7) & 0x7f),
					x_value >> 14
				);
			}
			else if(x_value <= 0xfffffff) {
				return this.append4(
					0x80 | (x_value & 0x7f),
					0x80 | ((x_value >> 7) & 0x7f),
					0x80 | ((x_value >> 14) & 0x7f),
					x_value >> 21
				);
			}
			else {
				return this.append5(
					0x80 | (x_value & 0x7f),
					0x80 | ((x_value >> 7) & 0x7f),
					0x80 | ((x_value >> 14) & 0x7f),
					0x80 | ((x_value >> 21) & 0x7f),
					x_value >> 28
				);
			}
		}
		// got to do some shifting
		else {
			let x_hi = Math.floor(x_value / 0x10000);
			let x_lo = x_value - 0x80000000;

			// success
			if(x_hi <= 0x7fffffff) {
				if(x_hi <= 0x3ff8) {
					if(x_hi <= 0x0f) {
						return this.append5(
							0x80 | (x_hi << 3) | (x_lo >> 28),
							0x80 | ((x_lo >> 21) & 0x7f),
							0x80 | ((x_lo >> 14) & 0x7f),
							0x80 | ((x_lo >> 7) & 0x7f),
							x_lo & 0x7f
						);
					}
					else {
						return this.append6(
							0x80 | (x_hi & 0x7f),
							0x80 | ((x_hi << 3) & 0x7f) | (x_lo >> 28),
							0x80 | ((x_lo >> 21) & 0x7f),
							0x80 | ((x_lo >> 14) & 0x7f),
							0x80 | ((x_lo >> 7) & 0x7f),
							x_lo & 0x7f
						);
					}
				}
			}
		}

		throw new Error(`encoding integer of 6 bytes or more not supported by '.vuint()'; try using '.vbigint()' insteead`);
	}

	/**
	 * Encode a variable-width unsigned Bigint
	 * @param  {BigInt} xn_value - the big integer value to encode
	 * @return {BytePosition} the updated write position
	 */
	vbigint(xn_value) {
		// fast encoding
		if(xn_value <= 0x7fffffffn) {
			if(xn_value <= 0x3fffn) {
				if(xn_value <= 0x7fn) {
					return this.append1(Number(xn_value));
				}
				else {
					return this.append2(
						Number(0x80n | (xn_value & 0x7fn)),
						Number(xn_value >> 7n)
					);
				}
			}
			else if(xn_value <= 0x1fffffn) {
				return this.append3(
					Number(0x80n | (xn_value & 0x7fn)),
					Number(0x80n | ((xn_value >> 7n) & 0x7fn)),
					Number(xn_value >> 14n)
				);
			}
			else if(xn_value <= 0xfffffffn) {
				return this.append4(
					Number(0x80n | (xn_value & 0x7fn)),
					Number(0x80n | ((xn_value >> 7n) & 0x7fn)),
					Number(0x80n | ((xn_value >> 14n) & 0x7fn)),
					Number(xn_value >> 21n)
				);
			}
			else {
				return this.append5(
					Number(0x80n | (xn_value & 0x7fn)),
					Number(0x80n | ((xn_value >> 7n) & 0x7fn)),
					Number(0x80n | ((xn_value >> 14n) & 0x7fn)),
					Number(0x80n | ((xn_value >> 21n) & 0x7fn)),
					Number(xn_value >> 28n),
				);
			}
		}
		// use a loop
		else {
			let ib_write;

			do {
				ib_write = this.append1(Number(0x80n | (xn_value & 0x7fn)));
				xn_value >>= 7n;
			} while(xn_value >= 0x7fn);

			return ib_write;
		}
	}
}

// byte() alias
BufferEncoder.prototype.byte = BufferEncoder.prototype.append1;

module.exports = BufferEncoder;

